
Notes on Cofinite Quantification
********************************

In the typechecking rule for methods, we have to quantify the variable z we use
to open the method body. There are three ways to quantify z (we give the 
quantifiers one would get in the result of a corresponding inversion lemma):
* forall z \notin G                called "[z # G] style 1"
* exists z \notin G                called "[z # G] style 2"
* exists L, forall z \notin L      called "[z \notin L] style"

Here's the typing_def_mtd rule in these three styles:

[z # G] style 1:

    typing_def_mtd : forall G S T t,
      (forall x, x # G -> typing_trm (G & x ~ S) (open_trm x t) T) ->
      typing_def G (def_mtd S t) (dec_mtd S T)

[z # G] style 2:

    typing_def_mtd : forall G x t S T,
      x # G ->
      typing_trm (G & x ~ S) (open_trm t x) T ->
      typing_def G (def_mtd t) (dec_mtd S T)

[z \notin L] style:

    typing_def_mtd : forall L G S T t,
      (forall x, x \notin L -> typing_trm (G & x ~ S) (open_trm x t) T) ->
      typing_def G (def_mtd S t) (dec_mtd S T)

Now there are two kinds of lemmas where freshness of variables is crucial:
* Those which grow the environment, eg weakening, which transforms a typing
  judgment which holds in [G1 & G3] into one which holds in [G1 & G2 & G3].
* Those which shrink the environment, eg substitution, which transforms a typing
  judgment which holds in [G1 & x ~ X & G2] into one which holds in [G1 & G2].

Let's see how these styles behave in the typing_def_mtd case of these two lemmas:


## weakening lemma in [z # G] style 1 works:

We get a z from the goal, and can choose one for the IH:
We want to prove
    forall z, z # (G1 & G2 & G3) -> typing_trm (G1 & G2 & G3 & z ~ S) (open_trm z t) T
and our IH tells us that
    forall z, z # G1 & G3 -> typing_trm (G1 & G2 & (G3 & z ~ S)) (open_trm z t) T
So we can introduce z and its freshness hypothesis and use it to specialize the IH to
prove the goal, because if z is fresh from [G1 & G2 & G3], it's also fresh from [G1 & G3].


## weakening lemma in [z # G] style 2 doesn't work:

We get a z from the IH, and can choose one for the goal:
The IH gives us a z fresh from [G1 & G3] and 
    ok (G1 & G2 & G3 & z ~ S) -> typing_trm (G1 & G2 & G3 & z ~ S) (open_trm z t) T
We want to prove
    typing_def (G1 & G2 & G3) (def_mtd S t) (dec_mtd S T)
and can choose any z we want to use to open the term t.
However, if the z given by the IH occurs in G2, we can't prove [ok (G1 & G2 & G3 & z ~ S)], 
so we can't use the IH, and we cannot prove the weakening lemma.


## substitution lemma in [z # G] style 1 doesn't work:

We get a z from the goal, and can choose one for the IH:
We want to prove
    forall z, z # (G1 & G2) -> typing_trm (G1 & G2 & z ~ S) (open_trm z t) T
and our IH tells us that
    forall z, z # (G1 & x ~ X & G2) -> typing_trm (G1 & G2) (open_trm z t) T
If we introduce z and its freshness hypothesis from the goal, we only get that z is fresh
from [G1 & G2], and if x = z, we cannot prove [z # (G1 & x ~ X & G2)], so we cannot
specialize the IH with the z we got from the goal.
So let's specialize the IH with a freshly picked z'. This requires another helper lemma
which tells us that the variable we use to open doesn't matter, something like
    typing_trm (G & x ~ X) (open_trm x e) T ->
    typing_trm (G & y ~ X) (open_trm y e) T
If we assume such a lemma, we can prove the substitution lemma, but to prove the
helper lemma, we again have the same problem in the typing_def_mtd case:
We want to prove
    forall z, z # G & y ~ X -> typing_trm (G & y ~ X & z ~ S) (open_trm z (open_trm y t)) T
and our IH tells us that
    forall z, z # G & x ~ X -> typing_trm (G & y ~ X & z ~ S) (open_rec_trm (S n) y t) T
We cannot use the z from the goal to specialize the IH, so we would have to use a fresh
z' instead, but to do so, we would need the lemma we're about to prove.


## substitution lemma in [z # G] style 2 works:

We get a z from the IH, and can choose one for the goal:
The IH gives as a z fresh from [G1 & x ~ X & G2], and 
    typing_trm (G1 & x ~ X & G2 & z ~ S) (open_trm z t) T
We want to prove
    typing_def (G1 & G2) (def_mtd S t) (dec_mtd S T)
and can choose any z we want to use to open the term t. Choosing the z that the IH gave us
works, because from [z # (G1 & x ~ X & G2)] follows [z # (G1 & G2)], so we can prove
the substitution lemma.


## All lemmas work in [z \notin L] style:

We get an L from the IH, and can choose one for the goal. Moreover, the goal gives us a z
which is not in the L we chose, and we can choose choose any z not in L to specialize the IH.
So, for the goal we can choose an L which contains all variables in the current Coq environment,
and then the goal gives us a z which is fresh from everything, so we can use that z to 
specialize the IH and everything works.


## Conclusion:

[z # G] style 1 works for environment-growing lemmas, but not for environment-shrinking lemmas.
[z # G] style 2 works for environment-shrinking lemmas, but not for environment-growing lemmas.
[z \notin L] style works for both kinds of lemmas.

    

