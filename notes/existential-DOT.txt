
Variable              x, y, z
Field label           l
Method label          m
Type label            L

Term         t, u ::= v                               value
                      t.l                             selection
                      t.m(u)                          application
                      pack z:T = v for u              introduction of existential
                                                      (a generalization of "new")

Value           v ::= x                               variable
                      {ds}                            plain record without self ref

Path            p ::= x
                      p.l

Definition      d ::= L: S..U                         type member definition
                      l: T = x                        field definition
                      m(x: S): U = u                  method definition

Def. list:     ds ::= ()                              empty definition list
                      ds, d                           definition list cons

Type      S, T, U ::= Top                             top
                      Bot                             bottom
                      {D}                             structural type with 1 declaration
                      p.L                             type reference
                      ∃x:S U                          existential
                      x.type                          self type
                      T & T                           intersection
                      T | T                           union

Declaration     D ::= L: S..U                         abstract or alias type declaration
                      l: T                            field declaration
                      m: S -> T                       method declaration

Environment     G ::= x_1: T_1, ..., x_n: T_n         (x_i disjoint)
Store           s ::= x_1: ds_1, ..., x_n: ds_n       (x_i disjoint)

Eval context    e ::= []
                      e.l
                      e.m
                      x.m(e)

Note: There's no evaluation inside a "pack...for..."

TODO do we need self types "x.type"?

Note: We have to exclude "pack z: T = z for z".
Cannot allow any term in first component of pack, because it's typechecked with z already in env.
Can only allow var (reference to store) or ds.
Maybe use closures instead of store?


Rule schemas
============

P is any judgment appearing on the right-hand side of the turnstile.

        y notin fv(P)
    G1, y: S, x: U, G2 |- P
    ----------------------- (open_ex)
    G1, x: ∃y:S U,  G2 |- P

  G, z: T |- x: z.type    G, z: T |- P
  ------------------------------------ (id_subst_1)
           [x/z]G |- [x/z]P

  G, z: T |- x: z.type    G, z: T |- P
  ------------------------------------ (id_subst_2)
           [z/x]G |- [z/x]P


Type assignment: G |- t: T
==========================

          (x: T) in G
          ----------- (ty_var)
           G |- x: T

           G |- t: T
        G |- T has (l: U)
        ----------------- (ty_sel)
           G |- t.l: U

            G |- t: T
      G |- T has (m: U -> S)
            G |- u: U
      ---------------------- (ty_app)
          G |- t.m(u): S

This is the elimination rule for existentials:

         G |- u: ∃z:T U
         --------------- (ty_ex_elim)
         G, z: T |- u: U

And we need two introduction rules for existentials:

  G, z: T |- ds: T     G, z: T |- u: U
  ------------------------------------ (ty_pack_defs)
   G |- pack z:T = {ds} for u: ∃z:T U

     G |- y: T    G, z: T |- u: U
   -------------------------------- (ty_pack_var)
   G |- pack z:T = y for u:  ∃z:T U

Note: "pack" is a generalization of "new", because we can write "new" as
new T{ds} == pack z: T = {ds} for z
and it has type "∃z:T T" or "∃z:T z.type" (TODO which of these?).
But we can also use "pack" to create a term which depends on something else than on
itself, say on the implementation of a List module:
pack m: ListModule = defaultListModuleImpl for m.emptyList()
which has type "∃z:ListModule z.List", so this allows us to abstract over the
concrete list module implementation which was used.
TODO: To type the expression assigned to z, ty_pack_defs puts z into the env,
whereas ty_pack_var does not. This anomaly is not so nice, and moreover, this
way of introducing recursion (in the case of ty_pack_defs) feels a bit like cheating,
we're abusing existentials to get recursion.

           G |- t: T1
          G |- T1 <: T2
          ------------- (ty_sbsm)
            G |- t: T2


Definition typing: G |- d: D
============================

Just checks if the definitions are what they claim.
It does not matter whether a self reference is in G or not, except that if
there's none, the definition cannot be recursive.

           G |- S <: U
    ------------------------- (ty_def_typ)
    G |- (L: S..U): (L: S..U)

            G |- x: T
     ----------------------- (ty_def_fld)
     G |- (l: T = x): (l: T)

          G, x: S |- t: U
 ---------------------------------- (ty_def_mtd)
 G |- (m(x: S): U = u): (m: S -> U)


Definitions typing: G |- ds: T
==============================

It does not matter whether a self reference is in G or not, except that if
there's none, the definitions cannot be recursive.

         ------------ (ty_defs_nil)
         G |- {}: Top

          G |- ds: T
          G |- d: D
     --------------------- (ty_defs_cons)
     G |- (ds, d): T & {D} 


Membership on types: G |- T has D
=================================

TODO do we need to parameterize it with a self ref?
i.e. "G |- T has_z D"
TODO how can the rules prove something like
"({val l: self.T} & {T = Int}) has self.T where self.T actually is Int"

Top and Bot have no members. The typ_ex_has rule is the interesting one.

          -------------- (typ_rcd_has)
          G |- {D} has D

            G |- p: T
        G |- T has L: S..U
           G |- U has D
        ------------------ (typ_sel_has)
          G |- p.L has D

            x notin fv(D)
         G, x: S |- U has D
      ------------------------ (typ_ex_has)
          G |- ∃x:S U has D

TODO: Do we have to substitute a self reference in D by x?
           G |- x: T
          G |- T has D
        ----------------- (typ_self_has)
        G |- x.type has D

          G |- T1 has D1
       ------------------- (typ_and_has_1)
       G |- T1 & T2 has D1

          G |- T2 has D2
       ------------------- (typ_and_has_2)
       G |- T1 & T2 has D2

         G |- T1 has D1
         G |- T2 has D2
     ------------------------ (typ_and_has_12)
     G |- T1 & T2 has D1 & D2

         G |- T1 has D1
         G |- T2 has D2
     ------------------------ (typ_or_has_12)
     G |- T1 | T2 has D1 | D2


Subtyping: G |- S <: T
======================

         ----------- (subtyp_refl)
         G |- T <: T

        ------------- (subtyp_top)
        G |- T <: Top

        ------------- (subtyp_bot)
        G |- Bot <: T

        G |- D1 <: D2
      ----------------- (subtyp_rcd)
      G |- {D1} <: {D2}

 G |- p has L: S..U    G |- U <: T
 --------------------------------- (subtyp_sel_l)
         G |- p.L <: T

 G |- T <: S    G |- p has L: S..U    G |- S <: U
 ------------------------------------------------ (subtyp_sel_r)
                G |- T <: p.L

  G, z: S |- U <: T     z notin fv(T)
  ----------------------------------- (subtyp_ex_l)
         G |- ∃z:S U <: T

    G |- y: S     G |- T <: [y/x]U
    ------------------------------ (subtyp_ex_r)
         G |- T <: ∃z:S U

            G |- x: T
         ---------------- (subtyp_self)
         G |- x.type <: T

Note: There's no equivalent to subtyp_self with x.type on rhs. To have x.type
on rhs, we must use subtyp_refl.

 G |- S <: T1    G |- S <: T2
 ---------------------------- (subtyp_and)
       G |- S <: T1 & T2

        G |- T1 <: S
      ----------------- (subtyp_and_l)
      G |- T1 & T2 <: S

        G |- T2 <: S
      ----------------- (subtyp_and_r)
      G |- T1 & T2 <: S

 G |- T1 <: S    G |- T2 <: S
 ---------------------------- (subtyp_or)
       G |- T1 | T2 <: S

        G |- S <: T1
      ----------------- (subtyp_or_l)
      G |- S <: T1 | T2

        G |- S <: T2
      ----------------- (subtyp_or_r)
      G |- S <: T1 | T2


Declaration Subtyping: G |- D1 <: D2
====================================

             ----------- (subdec_refl)
             G |- D <: D

      G |- S2 <: S1  G |- U1 <: U2
      ------------------------------- (subdec_typ)
      G |- (L: S1..U1) <: (L: S2..U2)

                 G |- T1 <: T2
            ----------------------- (subdec_fld)
            G |- (l: T1) <: (l: T2)

        G |- S2 <: S1    G |- T1 <: T2
      ----------------------------------- (subdec_mtd)
      G |- (m: S1 -> T1) <: (m: S2 -> T2)


Reduction: t | s -> t' | s'
============================

    (x: (ds1, l: T = y, ds2)) in s
    ------------------------------ (red_sel)
          x.l | s  ->  y | s

 (x: (ds1, m(y: S): T = t, ds2)) in s
 ------------------------------------ (red_call)
      x.m(z) | s  ->  [z/y]t | s

                 z notin s
 ------------------------------------------- (red_pack_defs)
 pack z:T = ds for u | s  ->  u | s, (z: ds)

   -------------------------------------- (red_pack_var)
   pack z:T = y for u | s  ->  [y/z]u | s

            t | s  ->  t' | s'
         ------------------------ (red_cong)
         e[t] | s  ->  e[t'] | s'





