

prepend_chain/transitivity push-back only works for precise typing
existence of precise expansion not preserved by narrowing towards unrealizable env
--> need imprecise typing for terms, because method arg type might be uninhabited
--> need imprecse-to-precise conversion, which needs exp_preserves_sub
invert_subtyp_bind (for which we needed oktrans-to-notrans) is a corolllary of exp_preserves_sub, so not sure if prepend_chain/transitivity push-back is still needed

sketch the big picture:

pmode (precise/imprecise)
progress/preservation use has_sound (transforms imprecise "x has l: D2" into decs_has on x's precise type from store)
needs invert_subtyp_bind, which first uses ip2pr and then exp_preserves_sub_pr
exp_preserves_sub_pr and narrowing for precise subtyping by mutual induction using an appropriate termination measure

-------

2014-05-31: [Milestone 2':] Transitivity push-back proof for precise typing

2014-08-02: [Milestone 3]: Progress+Preservation for simple records language

2014-08-04:
need unique exp and has-mem
And why does narrowing has work in DotTransitivity?
Because has only defined for variables of type typ_bind => no expansion needed.
Note that imprecise has means non-unique has => problems in transitivity pushing proof.
So we need an expansion for Bot

2014-08-05:
Idea: bake typ_bind-narrowing into otherwise trivial oktrans transitivity
Lemma subtyp_trans_oktrans_n: forall G x T1 T2 T3 Ds1 Ds2,
  subdecs oktrans (G & x ~ typ_bind Ds1) Ds1 Ds2 ->
  subtyp oktrans (G & x ~ typ_bind Ds1) T1 T2 ->
  subtyp oktrans (G & x ~ typ_bind (*-->*)Ds2(*<--*)) T2 T3 ->
  subtyp oktrans (G & x ~ typ_bind Ds1) T1 T3.
Result: Doesn't work because if T1=T2, we this is narrowing, which we also cannot prove.

Idea: For each path type, we can define a follow_ub ("follow upper bound") judgment, which follows upper bound until it's not a path type any more. Prove this function total, and then replace all path types by their not-sel upper bound.
Result: Used subtyp judgment to simulate wf judgment, which is a bad idea, so that's why it didn't work. Moreover, how to represent recursive types without nominality?

2014-08-06:
Idea:  Define "dreal" judgment ("definitely realizable") and "real" judgment (= exists a dreal sub-env) for envs, and prove lemma "wf_sto s G -> real_ctx0 G".
Result: To prove lemma, we need that sub-env is structural, but how to express recursive types then?

2014-08-07:
Idea: "imode" ("inversion rules allowed?"): Add subtyping rule [p has L:S..U => S <: U] and additional mode to control if we allow it at top level.
Not further investigated in Coq, because it doesn't solve the exp_preserves_sub problem (cannot just "invent" some member of S).

2014-08-11: substitution principle for subtyping judgments holds modulo some "trivial" details...

2014-08-13: Sketch big picture of progress/preservation with common part in has_sound, depends on narrowing!
Subtyping uses precise has, term typing uses imprecise has.

2014-08-14: Problem: Precise expansion cannot be narrowed towards (possibly non-realizable) env created to typecheck method body (intersection types expansion lost due to infinite upper bound chain).

2014-08-15: Imprecise narrowing is just a corolllary of the imprecise substitution principle.

2014-08-15: Start all-imprecise muDot.

2014-08-15: investigating if invert_ty_sel with built-in subsumption helps us.
for progress: no, because ty_sel is inverted by induction, in preservation: maybe
Lemma invert_ty_sel: forall G t l T,
ty_trm G (trm_sel t l) T ->
has G t (label_fld l) (dec_fld T).
vs
Lemma invert_ty_sel_old: forall G t l T,
ty_trm G (trm_sel t l) T ->
exists T', subtyp G T' T /\ has G t (label_fld l) (dec_fld T').

2014-08-16: 
Idea: inv-muDot.v: Add subdecs_inv rule instead of proving invert_subtyp_bind, but this gives us a subdecs judgment from which we cannot prove subdec, so we need an inversion rule for subdec (ok), but then subdec inversion doesn't work, so add even more inversion rules (still ok).
Result:
The rules work and weakening and substitution seems to work as well, but
it doesn't help a lot, because decs_has_preserves_sub, which was trivial
before, doesn't hold any more: If we're in a contradictory environment,
and the subdecs judgment was obtained from a subtyp_bind using the inversion
rule, there's no way we can "invent" a D1.
Preservation doesn't need decs_has_preserves_sub and becomes simpler, but
progress needs something like decs_has_preserves_sub, in order to assert
that if we get a subsumed member in the imprecise typing judgment, there
exists a (precise) member in the store. And doing this requires a real
invert_subtyp_bind.
So it seems that the inversion rules just avoid the problem, but it still
has to be solved. And they don't push it to another place where it's easier
to solve, so they're useless.

2014-08-18: introduce pmode := pr | ip

(3 weeks away)

2014-09-18:
Idea: prepend_chain & exp_preserves_sub by mutual induction on.
Problem: on what?

2014-09-19:
make_subtyp_precise seems to always depend on something like exp_preserves_sub

2014-09-26: Problem: in ip2pr, we need narrowing for precise subdecs judgments.

2014-09-28: 
Idea: exp_preserves_sub_pr with subdecs conclusion on G only instead of [G & z ~ typ_bind Ds1], so that ip2pr does not need narrowing before subdecs_trans. 
Result: Does not work because in case subtyp_sel_l, there might be no z in G of type "upper bound of p.L".

2014-09-28:
Idea: ip-ep-muDot.v:
pmode = "do the "has" judgments needed in subtyping have to be precise?"
- in imprecise mode (ip), subsumption is allowed everywhere
- in env-precise mode (ep), all sub-proofs with the same environment must not use
 subsumption, but as soon as the environment grows, subsumption is allowed.
Problem: Only useful if conclusion of exp_preserves_sub is ip, but how can ip2pr deal with that? 

2014-10-14:
Idea: Force expansion to be total by remembering history of visited path types, and once a cycle is detected, just return empty set of declarations.
Result: Might solve some problems, but not the big termination issue problem.

2014-10-23:
Observed that DotTransitivity uses a simpler "has" judgment without expansion => subdecs narrowing is much simpler

2014-10-27: smode-totalexp-muDot.v:
Idea: smode controls if has/exp are required to be stable under narrowing,
smode := stable | unstable.
2014-11-04: To get the termination measure working, the transitivity push-back
proof needs a Lo<:Hi proof inside subtyp_sel_r, so the case sel_r of
simple_narrow_subtyp needs to narrow [has G x L (dec_typ Lo2 Hi2)] to
[has G x L (dec_typ Lo1 Hi1)] in such a way that [Lo1 <: Hi1], so
simple_narrow_has_dec_typ should guarantee that the narrowed dec_typ
still has good bounds, so subdec_typ has to require that [Lo1 <: Hi1],
so decs_bot_has_subdec has to prove Top <: Bot.
--> in subdec, require right dec_typ to have good bounds, but not the left one
TODO and then?

2014-11-08: Idea: substnarrow (= precise substitution + narrowing in one).
Problem: does not work because need to apply exp_preserves_sub on S1 <: S2 which is not the one on which we do the induction.

2014-11-09: start to actually write down narrowing for precise subtyping

2014-11-14: sketch precise narrowing + exp_preserves_sub as one big mutual induction, seems to work so far EXCEPT what is the termination measure??

2014-11-18: Idea: go back to inv-muDot, and instead of trying to get completely rid of inversion axioms, just do push-back on them.
Problem: No idea how to prove it...

2014-11-19: Idea: cbounds (collapsed bounds) judgment, require objects constructed by "new" to have cbounds => if wf_sto s G, then all types in G have cbounds.
Problems: in exp_preserves_sub_pr/case subtyp_trans:
1) does cbounds_decs for the decs of the middle type hold? Needed to invoke narrowing.
2) applying narrowing-IH on conclusion of exp_preserves_sub-IH which might be bigger
Morever: in case subtyp_bind, the decs might have non-collapsed bounds, but we put them into env
And: precise subdecs narrowing (which should benefit from cbounts) is used by exp_preserves_sub_pr/case subtyp_trans,
which cannot guarantee "cbounds Ds1" nor "cbounds Ds2", so we cannot pass
any of these two to narrowing, so narrowing cannot get cbounds_ctx for
old env nor for new env.

2014-12-10: 
Idea: Add narrowing for precise subtyping as a rule.
Problem: substitution lemma doesn't work any more

2014-12-30:
Idea: Max ctx size anywhere in proof tree is hopefully preserved by narrowing, and the in the cases where we use a lemma on a not-necessarily-smaller input, the env is always one bigger. So use "distance to max env size" as a termination measure.
Result: Seemed very promising, but in narrowing/case subtyp_bind, both IHs only work up to n, but should work for n+1.

2015-01-22: new muDot variant: one-dec refinements, no declaration lists, no expansion --> closer to dotty.
Idea: Before, when we had expansion, we had the problem that existence of an expansion in
precise typing was not preserved by narrowing:
z: { A: Bot..{f: Int}, B: Bot..Top }, z.A expands to {}, everything is fine
After narrowing:
z: { A: Bot..z.B /\ {f: Int}, B: Bot..z.A }, z.A has no finite expansion proof!
And existence of an expansion was absolutely crucial to prove "has" judgments, eg
to prove that an object a of type z.A still has a field f after narrowing.
Now, we do the expansion only for the members we're interested in, so we can just
forget the z.B part of z.A's upper bound and only look at {f: Int}, which is what
we need.
Problem: This only works with imprecise, but we still need precise typing to deal with the "p.L"-in-the-middle case, because no matter how we set up things, such a case will always occur.

2015-01-27: detected unexpected anomaly in swap_sub_and_has/case subtyp_or 

2015-01-28: started studying existential-DOT, sketched existential-DOT rules in txt format

2015-01-28: started lambda-DOT

2015-03-01: another "max ctx growth" attempt, but weakening goes in the other direction than the the termination measure

2015-03-03: deep/shallow wf judgment (inspired by Julien Crétin's thesis), which makes the wf derivations big enough to use them as fuel to prove expansion total, but still allows recursive types

2015-03-06: start ip-pr-lambda-DOT

2015-03-10: [Milestone 4] Progress+Preservation for ip-pr-lambda-DOT

2015-03-21: Problem in going from lambda-DOT to muDOT is the mutual dependency between narrowing and exp_preserves_sub (remember whole the dependency diagram). Encode it in leon, hoping that its termination checker would give a counterexample to termination, but it turns out that leon is far from being able to answer this.

2015-03-22: start ip-pr-muDOT

2015-03-23: insight: in a typ_bind-only env, "pth_has" only uses exp_bind,
which is very simple. So we can prove narrow_has without any induction.
Using this, we can prove narrowing for subtyp/dec/decs, and then prove
exp_preserves_sub, and then ip2pr
BUT the whole ip-pr approach will not work in muDOT, because ip2pr only works if we all types in the environment are wf, and in order to prove precise wf-ness of a bind-type, we have to put that bind-type into the env, so we have to show that it's wf, but that's exactly what we're about to prove -> chicken/egg problem.
And actually that's not very surprising, because an imprecise wf-jugment is not very strong, because you can always get rid of bad cycles by subsumption.

2015-03-24: study transitivity in nohas-imprecise lambda-DOT, all cases work except the case where the first subtyping judgment is a subtyp_sel_r, and the second is a subtyp_sel_l. So if we're given
x.A <: y.B <: z.C
and inversion will give us
y: {B: x.A..Top} and y: {B: Bot..z.C}.
and we have to prove z.A <: z.C. (Top and Bot might be something else, but it doesn't matter here.)

2015-03-31: [in papers repo] proof sketch for simple-dot, highlighting the delicate parts which do not yet work

2015-04-01: Working with Nada on ip-pr-gDOT, but ip-pr problems mentioned above still apply

2015-04-21: wip on no-declists precise lambda-DOT (with intersection/union types).
If we don't want to depend on (and narrow) wf-ness judgments, we could instead make member lookup (typ_has/hasnt) a total function (by using some cycle detection mechanism based on all visited path types). Note that it has to be total for the cases subtyp_and_l/r of swap_sub_and_typ_has (corresponds to exp_preserves_sub).
Problem: in order to prove termination of member lookup, we want to use the number of visited x.L as a termination measure, because it is upper-bounded by some number which can be determined from the ctx, but to find that number, we need to expand/do member lookup on every type of the ctx, which requires termination of member lookup, but this is just what we are proving.

2015-05-04: Another way to get total member lookup (typ_has): Add a set of already seen path types to this judgment, and return a bottom-decl if a cycle is detected. This is sound because no objects with cyclic bounds will ever be allocated, cyclic bounds will only occur in contradictory environments. Also return a top-decl for typ_top and typ_rcd when the label doesn't match, to make sure it's total (and doesn't need typ_hasnt). This is also sound because you can't do anything interesting with a top-decl (but note that this only holds for type members, but a method member might still be called...).
Now in swap_sub_and_typ_has/case subtyp_sel_l/r, we have to invert the typ_has judgment, so we get out two typ_has judgments with a history of length 1 (instead of empty). Idea: If there are no cycles, we can get rid of it because it's not used, and if there's a cycle, we can just "rotate" the proof by one step on the cycle. In other words: It should be possible to prove a remove_history lemma.
But note that it only holds if the decl is not a bottom-decl (because if it is then it could be the result of breaking a cycle). Problem in case typ_or_has: if left type T1 has some D1, but right type T2 has bottom-decl with some history, we cannot just remove that history.
We also need cyclic_typ_has_dec_bot: given history h12 from x1.L1 to x2.L2 and history h23 from x2.L2 to x3.L3, and next_in_hist from x3.L3 to x2.L2 (i.e. cycle), show that x2.L2 has bottom-decl. Problem: What if the next_in_hist`s in h23 depend on h12 (which is removed)?
--> not sure if this can work...

2015-05-11: The chicken-egg problem regarding wf_ctx (or simple_ctx or whatever you call it) also occures in gDOT, but not in ip2pr, but only in preservation/case red_new.

2015-05-16: explore various ways of defining typ_has as a total lookup function.
One idea is to go fuel-based, and return dec_top in the failure case, but if do that,
we'll have problems when defining lookup_def accordingly, because we'll have to return a method def for every label. That's possible (by returning some dummy method def), but this changes the semantics in such a way that we don't prove what we actually wanted to prove, because all "stuck"/NoSuchMethodError cases will not fail any more, but just silently execute the dummy method.
And an even bigger problem is the fuel: It hopefully holds that the more fuel we give, the more precise the returned dec is (because we return dec_top in case of timeout). But this doesn't really save us from proving lookup total, but it now just appears in a different shape: We have to prove that it converges, i.e. that there exists an amount of fuel after which it doesn't change any more.

2015-05-24: Idea: Don't carry wf-ness in a wf_ctx judgment, to avoid chicken-egg problems. But only carry it in regularity of typing --> no problems in narrow_wf with bigger env. Problem: narrow_has cannot get wf-ness to return subtyp_refl etc, because it can't conclude that since T is wf, all its members are wf as well (= typ_has_preserves_wf).

2015-05-25: try out co-inductive wf judgments, because it allows us to make them so "deeply looping" that typ_has_preserves_wf works, and thanks to coinduction, recursive types are not ruled out.
Problem: How can we prove lemmas of the form
(co-inductive Prop) -> (inductive Prop) ?
In particular: typ_has_total!

2015-05-30: Encode the coinduction of wf_typ with an Inductive wf_typ which takes a set of assumptions (grown only when we go through typ_rcd, so only guarded recursion is allowed).
Allows to prove typ_has_preserves_wf, typ_has_total, and still allows recursive types.

2015-05-31: in narrow_has, we cannot obtain all needed wf-ness from the subtyping judgment

2015-06-10: narrow_wf has to call narrow_binds, which expects a wf jugment with empty history (for the subdec_refl case, but then narrow_wf also calls subtyp_regular on this later, so it's really needed). But if we do induction on wf derivations, sub-derivations can have non-empty history.
So: Idea: narrow_wf only for empty set of assumptions, so that
we can use the wf_typ to pass to narrow_binds (because narrow_binds
wants an empty set of assumptions in the wf_typ), and remove the
assumption added by wf_rcd on-the-fly using remove_hyp_from_wf_dec.
Since induction on wf_typ_impl itself only gives us an IH which
requires \{} = \{ typ_rcd D }, we have to measure the height of the
wf judgments ourselves, and do induction on that height.
Problem: remove_hyp_from_wf_dec increases the height by at least 1,
so we cannot apply it to a derivation on which we want to apply the IH.

2015-06-10: narrow_has finally works, but needs wf_ness of the type in the more precise env (which is quite a strong hypothesis).

2015-06-11: We cannot give a wf_ctx hyp to narrow_ty, because otherwise we have a chicken-egg problem in narrow_ty/case ty_new. But narrow_ty works without a wf_ctx hyp, so we're fine.

2015-06-11: Add a rule which allows to assume good bounds (as a Coq proof term). Cannot add it to the subtyping rules because of the strict positivity restriction, but we can add it to the term typing rules.
          G |- T wf
          good_bounds G => G |- t : T
          --------------------------- (ty_hyp)
          G |- t : T

where Definition good_bounds_typ(G: ctx)(T: typ) :=
        forall L Lo Hi, typ_has G T (dec_typ L Lo Hi) -> subtyp G Lo Hi.
      Definition good_bounds(G: ctx) :=
        forall x X, binds x X G -> forall L Lo Hi, typ_has G X (dec_typ L Lo Hi) -> subtyp G Lo Hi.

2015-06-12: Revisit the problem that induction on wf judgments has to deal with non-empty history:
Define a valid_history judgment which states that a given history (set of visited types) indeed corresponds to what was seen when proving a wf statement, and also carries all seen wf proofs (so that we can append them once we hit a wf_hyp). Make sure that valid_history is defined in such a way that it can be maintained during an induction on a wf derivation.
Then prove a lemma remove_valid_history, which turns a wf proof with some valid history into one with empty history (by "rotating" the proof).
This works, but we cannot use it in narrow_wf, because we would have to narrow a valid_history proof, which contains wf proofs, so we would have to narrow these, but narrowing wf proofs is just what we're about to prove --> another chicken/egg problem.
Defining a custom induction principle for wf_typ/dec which always has empty A (history) doesn't work either, becauset if we apply remove_own_hyp_from_wf_dec before passing the derivation to the IH, its size might increase!

2015-06-16: define typ_has and wf_typ coinductively, hoping that typ_has_total (wf_typ implies typ_has or typ_hasnt) can be proven, but cofix cannot be applied to goal of the form "exists D, ..." because that's inductive.

2015-06-16: allowing type selections only on stable types solves 1 problem:
* remove_history in narrowing/case wf_sel (not needed any more)

2015-06-26: Since in ty_hyp, the good_bounds judgment appears in a contravariant positions, each lemma now also needs an "undo" version:
- weakening -> strengthening (might hold with enough wf-ness hypotheses, but very hard in the transitivity case)
- narrowing -> undo-narrowing (doesn't hold)
- substitution -> undo-subst (very tricky, didn't succeed, it's not even clear how to state it)
New ty_hyp rule: If you want to suppose good bounds, you must prove
the typing derivation not just for G, but for all subenvs of G.
Moreover, if we also include weakening in the subenv judgment, strengthening and undo-subst is not needed any more.
But: Will the substitution lemma work with the ty_hyp rule?

2015-06-26: make term typing imprecise --> solves the problem that in narrowing/case ty_new, the fv-restriction was not preserved

2015-07-03: undo-subst: general problem: to undo the substitution [x:=y], we cannot just do [y:=x], because the ys which already were ys before the first substitution should not be turned into xs

2015-07-04: introduce ty_def_hyp as a rule (instead of only ty_trm_hyp), and hmode to control whether it is allowed at top-level.
Problem: ty_def can suppose good_bounds for the type it is about to check, but this is too much.

2015-07-04: having only aliases in "new" allows us to get rid of the ty_def_hyp rule
--> problem that ty_def can suppose good_bounds for the type it is about to check is gone

2015-07-06: Giving up on undo-subst after more than one week of unsuccessful attempts.

2015-07-07: Add subtyping rule [x has L:S..U => S <: U] and hmode to control if we allow it (deeply).
Actually this is the same idea as in 0a9cf32 (exactly 11 months ago),
but this time I insisted more and it works for gDOT :-)
Note, though, that okhyp_to_nohyp currently relies on the fact that
subtyping never grows the env, which will not be the case any more
when we add existentials.

2015-07-08: "power_subtyp n" is a stronger version of subtyping which additionally
guarantees memberwise subtyping up to depth n.
Might be helpful if used in the subenv judgment used by narrowing, but I am not sure.

2015-07-08: [Milestone 5] Progress+Preservation for gDOT (global self refs)
Restriction: Type selections x.L are only allowed if the type of
x is stable, i.e. not allowed if the type of x is again a sel type

2015-07-08: exDOT with precise typ_has: do we need/want a typ_ex_has rule or only the skolemization rule?
For instance: How to typecheck the term a.f(x).g(y) where a.f(x) is of type ex(z: T)U ?
Three "solutions":

1) G, x: T |- U has D     x notin fv D
   -----------------------------------
   G |- ex(x: T)U has D

   too lame because of the fv condition

2) distribute(x, T D) = match D with
   | L: S..U => L: ex(x: T)S .. ex(x: T)U
   | m: S->U => m: ex(x: T)S -> ex(x: T)U
   end

   G, x: T |- U has D
   --------------------------------------
   G |- ex(x: T)U has distribute(x, T, D)

3) First convert into single assignment form:
   val v1 = a.f(x);
   v1.g(y)
   No typ_ex_has rule, only the skolemization rule.

Solution 3) seems to be the best because the 1) and 2) are too lame.

2015-07-09: Solution 3) is not good enough for cases like
G = x: {L: Bot .. ex(z: T)U}     (or x: {D} /\ ex(z: T)U)
    a: x.L
where we want to do skolemization before typechecking a.m(...),
because the existential is not at top level.
--> also discuss what problems remain/go away if we use imprecise typing instead of typ_has.

2015-07-10: narrow_has_hasnt (from G2 to narrower G1) needs need wf_typ G1 T (G1, not G2!)
in case typ_sel_has might, but there we might get rid of it if we're in a wf_ctx,
but in case typ_and_has_1, we really need wf-ness in G1 to look up the members!

2015-07-10: add stable_alias rule, problem: narrowing can change a member of a stable type to an "equivalent" one (i.e. one which is a subdec and a superdec of the original one), so we would have to deal with such equivalence everywhere, which is ugly.

2015-07-14: problem adding class types (nominal): how are terms of type class type introduced? Answer: By "new", but this requires expansion to check if all members were given.

2015-07-15: monadic typechecker with error messages for gDOT



TODO discuss significant differences to F/Fsub
 


